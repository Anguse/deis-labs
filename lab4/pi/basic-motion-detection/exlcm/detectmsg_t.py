"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class detectmsg_t(object):
    __slots__ = ["timestamp", "type"]

    __typenames__ = ["int64_t", "string"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.timestamp = 0
        self.type = ""

    def encode(self):
        buf = BytesIO()
        buf.write(detectmsg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __type_encoded = self.type.encode('utf-8')
        buf.write(struct.pack('>I', len(__type_encoded)+1))
        buf.write(__type_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != detectmsg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return detectmsg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = detectmsg_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __type_len = struct.unpack('>I', buf.read(4))[0]
        self.type = buf.read(__type_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if detectmsg_t in parents: return 0
        tmphash = (0x3b11de6b4b71486b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if detectmsg_t._packed_fingerprint is None:
            detectmsg_t._packed_fingerprint = struct.pack(">Q", detectmsg_t._get_hash_recursive([]))
        return detectmsg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

