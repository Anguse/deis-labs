1. How do the messages look like in LCM?
	- We have two messages:
	Message one: from object detection:
	  int64_t timestamp =  seconseds since Jan 1 1970.
	  string type= alert or heartbeat
	Message two: External message sent to convoy. 
	  int64_t timestamp = seconds since Jan 1 1970.
	  int32_t id = The id for the vehicle
	  int32_t mode = The different modes
	  string type = alert or heartbeat

2. How do you represent time?
	For time we use time.time() from python. This returns the time in seconds since
	the epoch. Time since the epoch is platform dependent, for us this is 1970 
	January 1. 
3. How well do the time match between the different parts of the systems(i.e. the 
 different computing platforms)?
	- After recieving the message we optained the local time of the recieving 
	machine and compared that to the timestamp of the message. The difference was at most one second but differed mostly between 0.2-0.8 s.
	
4. What type of jitter do you get on the heartbeat signal(express in variance in seconds)?
	To measure jitter we did the same calculation as above only that the
	timestamp was taken on another machine. Therefor the timedifference is larger.
	Our RPI hasn't been connected to internet in a while and hasn't synced the 		
	clock with the real one so we did that manually therefor there might be some
	difference between the clocks on the RPI and the laptop. We got a 		  
	timedifference of about 11.5 seconds doing this.  
	
5. How does the jitter change with multiple vehicles(1,2,5,10 and 20)?
	For 2nd vehicle: 11.9 seconds
	For 5th vehicle: 12.7 seconds 
	For 10th vehicle: 14 seconds
	For 20th vehicle: 12.6 seconds
6. What do you think is the cause of the jitter? Can it be reduced, if so how?
	- Our guess is that it might be down to different timesettings. When we first 
	did our calculations for the jitter we got a huge number. That was because the
	clock on the RPI was set to sometime in 2016. Once we manually set the clock
	to one or two seconds from the clock on our laptop we reduced the jitter. 
