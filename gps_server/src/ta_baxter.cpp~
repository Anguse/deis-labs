
//INCLUDES

#include "ros/ros.h"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>  
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include "serial.hpp" //important for you
#include "std_msgs/String.h"

//DEFINES

#define padding 15
#define base_width 300 
#define button_pannel_w base_width
#define button_pannel_l 50
#define total_width 1600 //1200
#define total_length 600 //



//NAMESPACES

using namespace std;
using namespace cv;



//FUNCTION DECLARATIONS

void drawStuff();
float sign(float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y);
bool pointInTriangle(float pt_x, float pt_y, float v1_x, float v1_y, float v2_x, float v2_y, float v3_x, float v3_y);
void mouseCallBackFunc(int event, int x, int y, int flags, void* userdata);
void sleepok(int t, ros::NodeHandle &nh);


//GLOBAL VARS

//interface
char aWin[] = "Baxter Teaching Assistant Controller";
int up_rgb[] = {255, 255, 255};
int bottom_rgb[] = {255, 255, 255};
int right_rgb[] = {255, 255, 255};
int left_rgb[] = {255, 255, 255};
int default_rgb[] = {255, 255, 255};
int off_rgb[] = {127, 127, 127};
Mat image;

int text_offset_x=10, text_offset_y=20+20;
int col1_x=430, col2_x=590; //560
int offset_y = 20;
int buf = 400; //300

int USE_BAXTER = 0;
int USE_RIDGEBACK = 0;


//CLASSES

class rosStuff{
  public:
  ros::NodeHandle n;
  ros::Publisher top_pub; 
  ros::Subscriber top_sub; 
  ros::Publisher bottom_pub; 
  ros::Subscriber bottom_sub; 
};

char mySendBuf[256];
char myRecBuf[256];


void fromBaxterCallback(const std_msgs::String::ConstPtr& msg){
  ROS_INFO("%s", msg->data.c_str());
}

void fromRidgebackCallback(const std_msgs::String::ConstPtr& msg){
  ROS_INFO("%s", msg->data.c_str());
}


// MAIN FUNCTION


int main(int argc, char **argv){
  
  ros::init(argc, argv, "baxter_teaching_assistant");
  ROS_INFO("Baxter Teaching Assistant Controller gui: DEC 2016");
  ros::Time::init();

  ros::Rate loop_rate(10);
  rosStuff stuff;

  stuff.top_pub= stuff.n.advertise<std_msgs::String>("to_baxter", 1000);
  stuff.top_sub = stuff.n.subscribe("from_baxter", 1000, fromBaxterCallback);

  stuff.bottom_pub= stuff.n.advertise<std_msgs::String>("to_ridgeback", 1000);
  stuff.bottom_sub = stuff.n.subscribe("from_ridgeback", 1000, fromRidgebackCallback);


  namedWindow(aWin, 1);
  setMouseCallback(aWin, mouseCallBackFunc, &stuff); 
  moveWindow(aWin, 100, 0);

  drawStuff();

  loop_rate.sleep();
  loop_rate.sleep();
  loop_rate.sleep();	      
  ros::spinOnce();
  loop_rate.sleep();


 // serialSetup();

  int keyPressed=0;
  while(keyPressed!=27 && ros::ok()){ //27 is ESC
    ros::spinOnce();
    loop_rate.sleep();
    keyPressed= waitKey(10); 

  }

  //serialClose();

  return 0;
}


  
//functions to determine if point is within a triangle  
float sign(float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y){
  
  return (p1_x - p3_x) * (p2_y - p3_y) - (p2_x - p3_x) * (p1_y - p3_y);
}
bool pointInTriangle(float pt_x, float pt_y, float v1_x, float v1_y, float v2_x, float v2_y, float v3_x, float v3_y){
  
  bool b1, b2, b3;

  b1 = sign(pt_x, pt_y, v1_x, v1_y, v2_x, v2_y) < 0.0f;
  b2 = sign(pt_x, pt_y, v2_x, v2_y, v3_x, v3_y) < 0.0f;
  b3 = sign(pt_x, pt_y, v3_x, v3_y, v1_x, v1_y) < 0.0f;

  return ((b1 == b2) && (b2 == b3));
}


void drawStuff(){
  
  //draw arrows
  Point up_points[1][3];
  Point down_points[1][3];
  Point right_points[1][3];
  Point left_points[1][3];
     
  up_points[0][0] = Point( (base_width/2)+padding, padding);
  up_points[0][1] = Point( (base_width/3)+padding, (base_width/3) + padding);
  up_points[0][2] = Point( ((2*base_width)/3)+padding, (base_width/3) + padding); 
  
  down_points[0][0] = Point( (base_width/2)+padding, base_width+padding);
  down_points[0][1] = Point( (base_width/3)+padding, ((2*base_width)/3)+padding);
  down_points[0][2] = Point( ((2*base_width)/3)+padding, ((2*base_width)/3)+padding );  
 
  right_points[0][0] = Point( ((2*base_width)/3)+padding, (base_width/3) + padding);
  right_points[0][1] = Point( base_width+padding, (base_width/2)+padding);
  right_points[0][2] = Point( ((2*base_width)/3)+padding, ((2*base_width)/3)+padding); 
  
  left_points[0][0] = Point( (base_width/3) + padding, (base_width/3) + padding);
  left_points[0][1] = Point( padding, (base_width/2)+padding);
  left_points[0][2] = Point( (base_width/3) + padding, ((2*base_width)/3)+padding);   
  
  const Point* ppt_up[1] = { up_points[0] };  
  const Point* ppt_down[1] = { down_points[0] };   
  const Point* ppt_right[1] = { right_points[0] };  
  const Point* ppt_left[1] = { left_points[0] };  
  
  int npt[]= { 3 };
  image = Mat::zeros(total_length, total_width, CV_8UC3 );
    
  fillPoly(image, ppt_up, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );
  fillPoly(image, ppt_down, npt, 1, Scalar( bottom_rgb[0], bottom_rgb[1], bottom_rgb[2]), 8 );
  fillPoly(image, ppt_right, npt, 1, Scalar( right_rgb[0], right_rgb[1], right_rgb[2]), 8 );  
  fillPoly(image, ppt_left, npt, 1, Scalar( left_rgb[0], left_rgb[1], left_rgb[2]), 8 );  
 
  //add new diagonal arrows
  Point up_left_points[1][3];
  Point up_right_points[1][3];
  Point down_left_points[1][3];
  Point down_right_points[1][3];

  up_left_points[0][0] = Point( padding, padding);
  up_left_points[0][1] = Point( (base_width/3)+padding, padding );
  up_left_points[0][2] = Point( padding, (base_width/3)+padding );

  up_right_points[0][0] = Point( base_width+padding, padding);
  up_right_points[0][1] = Point( ((2*base_width)/3)+padding, padding );
  up_right_points[0][2] = Point( base_width+padding, (base_width/3)+padding );

  down_left_points[0][0] = Point( padding, ((2*base_width)/3)+padding );
  down_left_points[0][1] = Point( (base_width/3)+padding, base_width+padding);
  down_left_points[0][2] = Point( padding, base_width+padding );

  down_right_points[0][0] = Point( base_width+padding, ((2*base_width)/3)+padding );
  down_right_points[0][1] = Point( ((2*base_width)/3)+padding, base_width+padding );
  down_right_points[0][2] = Point( base_width+padding, base_width+padding );


  const Point* ppt_up_left[1] = { up_left_points[0] };
  const Point* ppt_up_right[1] = { up_right_points[0] };
  const Point* ppt_down_left[1] = { down_left_points[0] };
  const Point* ppt_down_right[1] = { down_right_points[0] };

  fillPoly(image, ppt_up_left, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );
  fillPoly(image, ppt_up_right, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );
  fillPoly(image, ppt_down_left, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );
  fillPoly(image, ppt_down_right, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );


  //add new rotate arrows
  Point rot_left_points[1][3];
  Point rot_right_points[1][3];

  rot_left_points[0][0] = Point( (base_width/3) + padding, (base_width/3) + padding + 220);
  rot_left_points[0][1] = Point( padding, (base_width/2)+padding + 220);
  rot_left_points[0][2] = Point( (base_width/3) + padding, ((2*base_width)/3)+padding + 220) ;

  rot_right_points[0][0] = Point( ((2*base_width)/3)+padding, (base_width/3) + padding + 220);
  rot_right_points[0][1] = Point( base_width+padding, (base_width/2)+padding + 220);
  rot_right_points[0][2] = Point( ((2*base_width)/3)+padding, ((2*base_width)/3)+padding + 220); 

  const Point* ppt_rot_left[1] = { rot_left_points[0] };
  const Point* ppt_rot_right[1] = { rot_right_points[0] };

  fillPoly(image, ppt_rot_left, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );
  fillPoly(image, ppt_rot_right, npt, 1, Scalar( up_rgb[0], up_rgb[1], up_rgb[2]), 8 );





 
  //draw buttons   
  rectangle(image, Point(col1_x, offset_y+10), Point(col1_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+10), Point(col2_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+50), Point(col1_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+50), Point(col2_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(col1_x, offset_y+90), Point(col1_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+90), Point(col2_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+130), Point(col1_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+130), Point(col2_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(col1_x, offset_y+170), Point(col1_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+170), Point(col2_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+210), Point(col1_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+210), Point(col2_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(col1_x, offset_y+250), Point(col1_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+250), Point(col2_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+290), Point(col1_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+290), Point(col2_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(col1_x, offset_y+330), Point(col1_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+330), Point(col2_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+370), Point(col1_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+370), Point(col2_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(col1_x, offset_y+410), Point(col1_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+410), Point(col2_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col1_x, offset_y+450), Point(col1_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(col2_x, offset_y+450), Point(col2_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);



  //new ones
  rectangle(image, Point(buf+col1_x, offset_y+10), Point(buf+col1_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+10), Point(buf+col2_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col1_x, offset_y+50), Point(buf+col1_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+50), Point(buf+col2_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(buf+col1_x, offset_y+90), Point(buf+col1_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+90), Point(buf+col2_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col1_x, offset_y+130), Point(buf+col1_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+130), Point(buf+col2_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(buf+col1_x, offset_y+170), Point(buf+col1_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+170), Point(buf+col2_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col1_x, offset_y+210), Point(buf+col1_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+210), Point(buf+col2_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(buf+col1_x, offset_y+250), Point(buf+col1_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+250), Point(buf+col2_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col1_x, offset_y+290), Point(buf+col1_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+290), Point(buf+col2_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(buf+col1_x, offset_y+330), Point(buf+col1_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8); //122, 122, 122
  rectangle(image, Point(buf+col2_x, offset_y+330), Point(buf+col2_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col1_x, offset_y+370), Point(buf+col1_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(buf+col2_x, offset_y+370), Point(buf+col2_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);

 // rectangle(image, Point(buf+col1_x, offset_y+410), Point(buf+col1_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
 // rectangle(image, Point(buf+col2_x, offset_y+410), Point(buf+col2_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);


  //day 3 and 4
  rectangle(image, Point(2*buf+col1_x, offset_y+10), Point(2*buf+col1_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+10), Point(2*buf+col2_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+50), Point(2*buf+col1_x+120-65, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+50), Point(2*buf+col2_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+90), Point(2*buf+col1_x+120-65, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+90), Point(2*buf+col2_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+130), Point(2*buf+col1_x+120-65, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+130), Point(2*buf+col2_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+170), Point(2*buf+col1_x+120-65, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+170), Point(2*buf+col2_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+210), Point(2*buf+col1_x+120-65, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+210), Point(2*buf+col2_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+250), Point(2*buf+col1_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+250), Point(2*buf+col2_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+290), Point(2*buf+col1_x+120-65, offset_y+320), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+290), Point(2*buf+col2_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+330), Point(2*buf+col1_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8); //122, 122, 122
  rectangle(image, Point(2*buf+col2_x, offset_y+330), Point(2*buf+col2_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+370), Point(2*buf+col1_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+370), Point(2*buf+col2_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+410), Point(2*buf+col1_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+410), Point(2*buf+col2_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+450), Point(2*buf+col1_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+450), Point(2*buf+col2_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);

//half-rectangles
  rectangle(image, Point(2*buf+col1_x+65, offset_y+50), Point(2*buf+col1_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+90), Point(2*buf+col1_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+130), Point(2*buf+col1_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+170), Point(2*buf+col1_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+210), Point(2*buf+col1_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+290), Point(2*buf+col1_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);


  putText(image, "Day 1", Point(col1_x+text_offset_x, 10+10), 1, 1.0, Scalar(255, 255, 255), 1, 8);
  putText(image, "Day 2", Point(col2_x+text_offset_x, 10+10), 1, 1.0, Scalar(255, 255, 255), 1, 8);

  putText(image, "0 Intro", Point(col1_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "0 Intro", Point(col2_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Handout", Point(col1_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Electronics", Point(col2_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Find Human", Point(col1_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Connectors", Point(col2_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Trivia", Point(col1_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Computers", Point(col2_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Telerob", Point(col1_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Math", Point(col2_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5 Definitions", Point(col1_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5 Break", Point(col2_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6 E and i", Point(col1_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6 Program", Point(col2_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7 Logic", Point(col1_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7 Autosupport", Point(col2_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8 Autosupport", Point(col1_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8 Alert", Point(col2_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9 Alert", Point(col1_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9 Telerob", Point(col2_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10 Eval Time", Point(col1_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10 Handout", Point(col2_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11 Thanksbye", Point(col1_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11 Thanksbye", Point(col2_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);



  putText(image, "Enable", Point(buf+col1_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Arms neutral", Point(buf+col2_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Disable", Point(buf+col1_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Arm wave", Point(buf+col2_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Head left", Point(buf+col1_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Read arms", Point(buf+col2_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Head center", Point(buf+col1_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "", Point(buf+col2_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Head right", Point(buf+col1_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "", Point(buf+col2_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Face happy", Point(buf+col1_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "", Point(buf+col2_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Face neutral", Point(buf+col1_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "", Point(buf+col2_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip close", Point(buf+col1_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Perfect", Point(buf+col2_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip open", Point(buf+col1_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Almost", Point(buf+col2_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip cal", Point(buf+col1_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Review", Point(buf+col2_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  //putText(image, "", Point(buf+col1_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  //putText(image, "", Point(buf+col2_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);



  putText(image, "Day 3", Point(2*buf+col1_x+text_offset_x, 10+10), 1, 1.0, Scalar(255, 255, 255), 1, 8);
  putText(image, "Day 4", Point(2*buf+col2_x+text_offset_x, 10+10), 1, 1.0, Scalar(255, 255, 255), 1, 8);

  putText(image, "0 Intro", Point(2*buf+col1_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "0 Intro", Point(2*buf+col2_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Ma  th", Point(2*buf+col1_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Roles", Point(2*buf+col2_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Fea  tures", Point(2*buf+col1_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Sensors1", Point(2*buf+col2_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Dis  tances", Point(2*buf+col1_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Sensors2", Point(2*buf+col2_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Cla  ssify", Point(2*buf+col1_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Actuators", Point(2*buf+col2_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5 Co  nfmatr", Point(2*buf+col1_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5 ImageProc", Point(2*buf+col2_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6 Facerec", Point(2*buf+col1_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6 ImageProc2", Point(2*buf+col2_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7 Sta  ts", Point(2*buf+col1_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7 Basic", Point(2*buf+col2_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8 Remote", Point(2*buf+col1_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8 Feedback", Point(2*buf+col2_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9 Deeper", Point(2*buf+col1_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9", Point(2*buf+col2_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10 Fablab", Point(2*buf+col1_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10 Handout", Point(2*buf+col2_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11 Thanksbye", Point(2*buf+col1_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11 Thanksbye", Point(2*buf+col2_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);



/*
//from day 3
  putText(image, "0 Intro", Point(2*buf+col1_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "0 Dist2", Point(2*buf+col2_x+text_offset_x, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Ma  th", Point(2*buf+col1_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "1 Class2", Point(2*buf+col2_x+text_offset_x, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Fea  tures", Point(2*buf+col1_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "2 Stats2", Point(2*buf+col2_x+text_offset_x, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Dis  tances", Point(2*buf+col1_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "3 Deeper", Point(2*buf+col2_x+text_offset_x, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Cla  ssify", Point(2*buf+col1_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "4 Wave hands!", Point(2*buf+col2_x+text_offset_x, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5 Co  nfmatr", Point(2*buf+col1_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "5", Point(2*buf+col2_x+text_offset_x, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6 Facerec", Point(2*buf+col1_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "6", Point(2*buf+col2_x+text_offset_x, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7 Sta  ts", Point(2*buf+col1_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "7", Point(2*buf+col2_x+text_offset_x, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8 Remote", Point(2*buf+col1_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "8", Point(2*buf+col2_x+text_offset_x, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9 Deeper", Point(2*buf+col1_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "9", Point(2*buf+col2_x+text_offset_x, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10 Fablab", Point(2*buf+col1_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "10", Point(2*buf+col2_x+text_offset_x, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11 Thanksbye", Point(2*buf+col1_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "11", Point(2*buf+col2_x+text_offset_x, 450+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);

  putText(image, "Enable", Point(col1_x+text_offset_y, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Disable", Point(col2_x+text_offset_y, 10+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Head left", Point(col1_x+text_offset_y, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Head neutral", Point(col2_x+text_offset_y, 50+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Face happy", Point(col1_x+text_offset_y, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Face neutral", Point(col2_x+text_offset_y, 90+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Arms neutral", Point(col1_x+text_offset_y, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Record pose", Point(col2_x+text_offset_y, 130+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Record done", Point(col1_x+text_offset_y, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Playback", Point(col2_x+text_offset_y, 170+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip close", Point(col1_x+text_offset_y, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip open", Point(col2_x+text_offset_y, 210+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Arm wave", Point(col1_x+text_offset_y, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Arm angles", Point(col2_x+text_offset_y, 250+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Move Arm", Point(col1_x+text_offset_y, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "", Point(col2_x+text_offset_y, 290+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Use Bax", Point(col1_x+text_offset_y, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Use Rid", Point(col2_x+text_offset_y, 330+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Grip cal", Point(col1_x+text_offset_y, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "j", Point(col2_x+text_offset_y, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "z", Point(col1_x+text_offset_y, 410+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, " ", Point(col2_x+text_offset_y, 370+text_offset_y), 1, 1.0, Scalar(0, 0, 0), 1, 8);

  rectangle(image, Point(30, 350), Point(30+120, 380), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(180, 350), Point(180+120, 380), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(330, 350), Point(330+120, 380), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(480, 350), Point(480+120, 380), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(30, 400), Point(30+120, 400+30), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(180, 400), Point(180+120, 400+30), Scalar(255, 255, 255), -1, 8);

  putText(image, "Eyes Left", Point(30+10, 350+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Eyes Right", Point(180+10, 350+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Eyes Center", Point(330+10, 350+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Eyes to X", Point(480+10, 350+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Body Center", Point(30+10, 400+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);
  putText(image, "Body to X", Point(180+10, 400+20), 1, 1.0, Scalar(0, 0, 0), 1, 8);

 */
  imshow(aWin, image);
}


 


void mouseCallBackFunc(int event, int x, int y, int flags, void* userdata){  //mouse callback
  
  rosStuff* r=(rosStuff*)userdata;
  time_t t = time(0);  
  
  
  if(event == EVENT_LBUTTONDOWN){
    cout << x << ", " << y << endl;
    if(USE_RIDGEBACK &&
(pointInTriangle(x, y, (base_width/2)+padding, padding, (base_width/3)+padding, (base_width/3) + padding, ((2*base_width)/3)+padding, (base_width/3) + padding)) 

    ){ //up
    
      //lastMotionEventProcced=t;
      ROS_INFO("Pressed Arrow Up");
      up_rgb[0] = 255; up_rgb[1] = 0; up_rgb[2] = 0;   
      bottom_rgb[0] = default_rgb[0]; bottom_rgb[1] = default_rgb[1]; bottom_rgb[2] = default_rgb[2];  
      right_rgb[0] = default_rgb[0]; right_rgb[1] = default_rgb[1]; right_rgb[2] = default_rgb[2]; 
      left_rgb[0] = default_rgb[0]; left_rgb[1] = default_rgb[1]; left_rgb[2] = default_rgb[2]; 
           
      drawStuff();
      ros::Rate loop_rate(10);
      
      std_msgs::String msg;
      std::stringstream ss;
      ss << "0";
      msg.data = ss.str();
      r->bottom_pub.publish(msg);

      ros::spinOnce();
      loop_rate.sleep(); 
       
    }
    else if(
USE_RIDGEBACK &&
(pointInTriangle(x, y, (base_width/3) + padding, (base_width/3) + padding, padding, (base_width/2)+padding, (base_width/3) + padding, ((2*base_width)/3)+padding))
){ //left
      ROS_INFO("Pressed Arrow Left");
      up_rgb[0] = default_rgb[0]; up_rgb[1] = default_rgb[1]; up_rgb[2] = default_rgb[2];  
      bottom_rgb[0] = default_rgb[0]; bottom_rgb[1] = default_rgb[1]; bottom_rgb[2] = default_rgb[2];  
      right_rgb[0] = default_rgb[0]; right_rgb[1] = default_rgb[1]; right_rgb[2] = default_rgb[2]; 
      left_rgb[0] = 255; left_rgb[1] = 0; left_rgb[2] = 0;
	  
      ros::Rate loop_rate(10);

      std_msgs::String msg;
      std::stringstream ss;
      ss << "1";
      msg.data = ss.str();
      r->bottom_pub.publish(msg);

      ros::spinOnce();
      loop_rate.sleep();	  
  
    }
    else if(
USE_RIDGEBACK &&
(pointInTriangle(x, y, (base_width/2)+padding, base_width+padding, (base_width/3)+padding, ((2*base_width)/3)+padding, ((2*base_width)/3)+padding, 
      ((2*base_width)/3)+padding))
){ //bottom
      ROS_INFO("Pressed Arrow Down");    
      up_rgb[0] = default_rgb[0]; up_rgb[1] = default_rgb[1]; up_rgb[2] = default_rgb[2];  
      bottom_rgb[0]  = 255; bottom_rgb[1] = 0; bottom_rgb[2] = 0;   
      right_rgb[0] = default_rgb[0]; right_rgb[1] = default_rgb[1]; right_rgb[2] = default_rgb[2]; 
      left_rgb[0] = default_rgb[0]; left_rgb[1] = default_rgb[1]; left_rgb[2] = default_rgb[2]; 
	  
      ros::Rate loop_rate(10);

      std_msgs::String msg;
      std::stringstream ss;
      ss << "2";
      msg.data = ss.str();
      r->bottom_pub.publish(msg);

      ros::spinOnce();
      loop_rate.sleep();	  
       
    } 
    else if(
USE_RIDGEBACK &&
(pointInTriangle(x, y, ((2*base_width)/3)+padding, (base_width/3) + padding, base_width+padding, (base_width/2)+padding, ((2*base_width)/3)+padding, 
      ((2*base_width)/3)+padding))
){ //right
      ROS_INFO("Pressed Arrow Right");

      up_rgb[0] = default_rgb[0]; up_rgb[1] = default_rgb[1]; up_rgb[2] = default_rgb[2];  
      bottom_rgb[0] = default_rgb[0]; bottom_rgb[1] = default_rgb[1]; bottom_rgb[2] = default_rgb[2];    
      right_rgb[0] = 255; right_rgb[1] = 0; right_rgb[2] = 0;  
      left_rgb[0] = default_rgb[0]; left_rgb[1] = default_rgb[1]; left_rgb[2] = default_rgb[2]; 
	      
      ros::Rate loop_rate(10);
 
      std_msgs::String msg;
      std::stringstream ss;
      ss << "3";
      msg.data = ss.str();
      r->bottom_pub.publish(msg);

      ros::spinOnce();
      loop_rate.sleep();	 	      
	      
    } 	
 

    //the array of buttons

    else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+10) && (y<offset_y+40)){
      	ROS_INFO("00");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "00"; 
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+10) && (y<offset_y+40)){
        ROS_INFO("20");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "20";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+50) && (y<offset_y+80)){
      	ROS_INFO("01");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "01";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+50) && (y<offset_y+80)){
        ROS_INFO("21");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "21";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+90) && (y<offset_y+120)){
      	ROS_INFO("02");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "02";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+90) && (y<offset_y+120)){
        ROS_INFO("22");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "22";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > col1_x) && (x < col1_x+120) && (y>offset_y+130) && (y<offset_y+160)){
      	ROS_INFO("03");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "03";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+130) && (y<offset_y+160)){
        ROS_INFO("23");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "23";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }



   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+170) && (y<offset_y+200)){
      	ROS_INFO("04");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "04";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+170) && (y<offset_y+200)){
        ROS_INFO("24");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "24";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > col1_x) && (x < col1_x+120) && (y>offset_y+210) && (y<offset_y+240)){
      	ROS_INFO("05");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "05";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if( (x > col2_x) && (x < col2_x+120) && (y>offset_y+210) && (y<offset_y+240)){
        ROS_INFO("25");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "25";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+250) && (y<offset_y+280)){
      	ROS_INFO("06");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "06";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+250) && (y<offset_y+280)){
        ROS_INFO("26");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "26";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > col1_x) && (x < col1_x+120) && (y>offset_y+290) && (y<offset_y+320)){
 
        //used to be rotate, now move arm

     	ROS_INFO("07");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "07";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+290) && (y<offset_y+320)){

        //used to be rotate, now move arm

        ROS_INFO("27");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "27";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+330) && (y<offset_y+360)){

      	ROS_INFO("08");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "08";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    	
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+330) && (y<offset_y+360)){
        ROS_INFO("28");
      	//ROS_INFO("%i",USE_RIDGEBACK);
	//USE_RIDGEBACK = ((USE_RIDGEBACK+1)%2);
    	//ros::spinOnce();
    	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "28";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+370) && (y<offset_y+400)){
      	ROS_INFO("09");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "09";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+370) && (y<offset_y+400)){
        ROS_INFO("29");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "29";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+410) && (y<offset_y+440)){
      	ROS_INFO("10");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "10";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+410) && (y<offset_y+440)){
        ROS_INFO("30");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "30";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+450) && (y<offset_y+480)){
      	ROS_INFO("11");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "11";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > col2_x) && (x < col2_x+120) && (y>offset_y+450) && (y<offset_y+480)){
        ROS_INFO("31");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "31";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

/*
   else if((x > col1_x) && (x < col1_x+120) && (y>offset_y+410) && (y<offset_y+440)){
      	ROS_INFO("20");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "20";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
*/


    //second array of buttons!!!!!!!!!!!!!!!!

    else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+10) && (y<offset_y+40)){ //USE_BAXTER && 
      	ROS_INFO("80");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "80"; 
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+10) && (y<offset_y+40)){
        ROS_INFO("90");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "90";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+50) && (y<offset_y+80)){
      	ROS_INFO("81");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "81";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+50) && (y<offset_y+80)){
        ROS_INFO("91");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "91";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+90) && (y<offset_y+120)){
      	ROS_INFO("82");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "82";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+90) && (y<offset_y+120)){
        ROS_INFO("92");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "92";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+130) && (y<offset_y+160)){
      	ROS_INFO("83");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "83";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+130) && (y<offset_y+160)){
        ROS_INFO("93");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "93";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+170) && (y<offset_y+200)){
      	ROS_INFO("84");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "84";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+170) && (y<offset_y+200)){
        ROS_INFO("94");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "94";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+210) && (y<offset_y+240)){
      	ROS_INFO("85");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "85";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

// added 8-29

    else if( (x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+210) && (y<offset_y+240)){
        ROS_INFO("95");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "95";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+250) && (y<offset_y+280)){
      	ROS_INFO("86");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "86";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+250) && (y<offset_y+280)){
        ROS_INFO("96");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "96";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+290) && (y<offset_y+320)){
 
        //used to be rotate, now move arm

     	ROS_INFO("87");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "87";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+290) && (y<offset_y+320)){

        //used to be rotate, now move arm

        ROS_INFO("97");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "97";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+330) && (y<offset_y+360)){

      	ROS_INFO("88");
      	//ROS_INFO("%i", USE_BAXTER);
	//USE_BAXTER = ((USE_BAXTER+1)%2);
    	//ros::spinOnce();
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "88";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    	
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+330) && (y<offset_y+360)){
        ROS_INFO("98");
      	//ROS_INFO("%i",USE_RIDGEBACK);
	//USE_RIDGEBACK = ((USE_RIDGEBACK+1)%2);
    	//ros::spinOnce();
    	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "98";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > buf+col1_x) && (x < buf+col1_x+120) && (y>offset_y+370) && (y<offset_y+400)){
      	ROS_INFO("89");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "89";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > buf+col2_x) && (x < buf+col2_x+120) && (y>offset_y+370) && (y<offset_y+400)){
        ROS_INFO("99");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "99";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


//ADDED FOR DAY THREE!
/*
  //day 3 and 4
  rectangle(image, Point(2*buf+col1_x, offset_y+10), Point(2*buf+col1_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+10), Point(2*buf+col2_x+120, offset_y+40), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+50), Point(2*buf+col1_x+120-65, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+50), Point(2*buf+col2_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+90), Point(2*buf+col1_x+120-65, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+90), Point(2*buf+col2_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+130), Point(2*buf+col1_x+120-65, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+130), Point(2*buf+col2_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+170), Point(2*buf+col1_x+120-65, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+170), Point(2*buf+col2_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+210), Point(2*buf+col1_x+120-65, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+210), Point(2*buf+col2_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+250), Point(2*buf+col1_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+250), Point(2*buf+col2_x+120, offset_y+280), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+290), Point(2*buf+col1_x+120-65, offset_y+320), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+290), Point(2*buf+col2_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+330), Point(2*buf+col1_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8); //122, 122, 122
  rectangle(image, Point(2*buf+col2_x, offset_y+330), Point(2*buf+col2_x+120, offset_y+360), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+370), Point(2*buf+col1_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+370), Point(2*buf+col2_x+120, offset_y+400), Scalar(255, 255, 255), -1, 8);

  rectangle(image, Point(2*buf+col1_x, offset_y+410), Point(2*buf+col1_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+410), Point(2*buf+col2_x+120, offset_y+440), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x, offset_y+450), Point(2*buf+col1_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col2_x, offset_y+450), Point(2*buf+col2_x+120, offset_y+480), Scalar(255, 255, 255), -1, 8);

//half-rectangles
  rectangle(image, Point(2*buf+col1_x+65, offset_y+50), Point(2*buf+col1_x+120, offset_y+80), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+90), Point(2*buf+col1_x+120, offset_y+120), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+130), Point(2*buf+col1_x+120, offset_y+160), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+170), Point(2*buf+col1_x+120, offset_y+200), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+210), Point(2*buf+col1_x+120, offset_y+240), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(2*buf+col1_x+65, offset_y+290), Point(2*buf+col1_x+120, offset_y+320), Scalar(255, 255, 255), -1, 8);

*/

    else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+10) && (y<offset_y+40)){ 
      	ROS_INFO("40");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "40"; 
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+10) && (y<offset_y+40)){
        ROS_INFO("60");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "60";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+50) && (y<offset_y+80)){
      	ROS_INFO("41");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "41";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+50) && (y<offset_y+80)){
        ROS_INFO("61");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "61";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+90) && (y<offset_y+120)){
      	ROS_INFO("42");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "42";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+90) && (y<offset_y+120)){
        ROS_INFO("62");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "62";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+130) && (y<offset_y+160)){
      	ROS_INFO("43");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "43";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+130) && (y<offset_y+160)){
        ROS_INFO("63");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "63";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+170) && (y<offset_y+200)){
      	ROS_INFO("44");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "44";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+170) && (y<offset_y+200)){
        ROS_INFO("64");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "64";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+210) && (y<offset_y+240)){
      	ROS_INFO("45");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "45";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

    else if( (x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+210) && (y<offset_y+240)){
        ROS_INFO("65");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "65";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+250) && (y<offset_y+280)){
      	ROS_INFO("46");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "46";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+250) && (y<offset_y+280)){
        ROS_INFO("66");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "66";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if( (x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+290) && (y<offset_y+320)){
 
        //used to be rotate, now move arm

     	ROS_INFO("47");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "47";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+290) && (y<offset_y+320)){

        //used to be rotate, now move arm

        ROS_INFO("67");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "67";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+330) && (y<offset_y+360)){

      	ROS_INFO("48");
      	//ROS_INFO("%i", USE_BAXTER);
	//USE_BAXTER = ((USE_BAXTER+1)%2);
    	//ros::spinOnce();
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "48";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    	
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+330) && (y<offset_y+360)){
        ROS_INFO("68");
      	//ROS_INFO("%i",USE_RIDGEBACK);
	//USE_RIDGEBACK = ((USE_RIDGEBACK+1)%2);
    	//ros::spinOnce();
    	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "68";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+370) && (y<offset_y+400)){
      	ROS_INFO("49");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "49";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+370) && (y<offset_y+400)){
        ROS_INFO("69");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "69";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }


   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+410) && (y<offset_y+440)){
      	ROS_INFO("50");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "50";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+410) && (y<offset_y+440)){
        ROS_INFO("70");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "70";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }

   else if((x > 2*buf+col1_x) && (x < 2*buf+col1_x+120) && (y>offset_y+450) && (y<offset_y+480)){
      	ROS_INFO("51");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "51";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }
    else if((x > 2*buf+col2_x) && (x < 2*buf+col2_x+120) && (y>offset_y+450) && (y<offset_y+480)){
        ROS_INFO("71");
  	ros::Rate loop_rate(10);

        std_msgs::String msg;
        std::stringstream ss;
        ss << "71";
        msg.data = ss.str();
        r->top_pub.publish(msg);

    	ros::spinOnce();
    	loop_rate.sleep();
    }






  }
  
  drawStuff();
    
}


void sleepok(int t, ros::NodeHandle &nh){
  
  if(nh.ok())
    sleep(t);
}
 
 
