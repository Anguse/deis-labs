// simple_serial_arduino.cpp : Defines the entry point for the console application.
//

#include <iostream>
#include "ros/ros.h"
#include <time.h>
#include <SerialStream.h>
#include <unistd.h>
#include <cstdlib>
#include <string>
#include <stdio.h>
#include <termios.h>
#include <term.h>
#include <curses.h>

#include <database_interface/db_class.h>
#include <boost/shared_ptr.hpp>
#include <database_interface/postgresql_database.h>

using namespace LibSerial ;


int serialStuff();
int mygetch();
time_t lastTimeTouched = time(NULL) -2;
time_t currentTime = time(NULL) - 2;




//#include <chrono>

static struct termios initial_settings, new_settings;
static int peek_character = -1;

void init_keyboard();
void close_keyboard();
int kbhit();
int readch();


class Task : public database_interface::DBClass
{
  public:
  database_interface::DBField<int> key_column_;
  database_interface::DBField<int> task_id_;
  database_interface::DBField<std::string> task_name_;
  database_interface::DBField<int> priority_;

  Task() :
    key_column_(database_interface::DBFieldBase::TEXT, 
		this, "key_column", "martin_places2", true),
    task_id_(database_interface::DBFieldBase::TEXT, 
		this, "task_id", "martin_places2", true),
    task_name_(database_interface::DBFieldBase::TEXT, 
		   this, "task_name", "martin_places2", true),
    priority_(database_interface::DBFieldBase::TEXT, 
		 this, "priority", "martin_places2", true)  
  {
    primary_key_field_ = &key_column_;
    fields_.push_back(&task_id_);
    fields_.push_back(&task_name_);
    fields_.push_back(&priority_);

    setAllFieldsReadFromDatabase(true);
    setAllFieldsWriteToDatabase(true);
  }
};

database_interface::PostgresqlDatabase database("192.168.10.5", "5432", "user2", "password", "martins_db");
int DATABASE_CONNECTED = 1;
time_t lastDatabaseCheck;

  
void databaseCheck(){
  std::cout << "got here\n";	  
  time_t t = time(0); 
  if(DATABASE_CONNECTED && (t > (lastDatabaseCheck  + 2))){ 
     //check database
     if (!database.isConnected()){
          std::cerr << "Database failed to connect \n";
          return;
        }
        std::cerr << "Database connected successfully \n";

        std::vector< boost::shared_ptr<Task> > tasks;
        if (!database.getList(tasks)){
          std::cerr << "Failed to get list of tasks\n";
          return;
        }
        std::cerr << "Retrieved " << tasks.size() << " tasks(s) \n";
	
	if(tasks.empty()){
	  std::cout << "good\n";	  
	}
	else{
	  std::cout << "emergency!!!!!!!!\n";
	  //maybe want to remove entry in table
	  //interrupt manual control, followme behavior
	  //get robot to say emergency (if possible in loud volume?)
	  
	}
	
 
        std::cerr << "tasks: \n";
        for (size_t i=0; i<tasks.size(); i++){
          std::cerr << tasks[i]->key_column_.data() 
	      << ", " 
	      << tasks[i]->task_id_.data()
	      << ", " 
	      << tasks[i]->task_name_.data()
	      << ", " 
	      << tasks[i]->priority_.data()	      
	      << "\n";
        }  
       /*  */
  } 
  
  
  //LETS INSERT A CALL
  
  Task new_task;
  new_task.key_column_.data()  = 1;
  new_task.task_id_.data() = 1;
  new_task.task_name_.data() = "help_me";
  new_task.priority_.data() = 1;
  if (!database.insertIntoDatabase(&new_task)) 
    std::cerr << "Database insertion failed\n";
  else 
    std::cerr << "Database insertion succeeded\n";
  
  
}

/*
int main3()
{
    int ch = 0;
    init_keyboard();
    while(ch != 'q') {
        printf("looping\n");
        sleep(1);
        if(kbhit()) {
            ch = readch();
            printf("you hit %c\n",ch);
        }
    }
    close_keyboard();
    exit(0);
}

*/
void init_keyboard()
{
    tcgetattr(0,&initial_settings);
    new_settings = initial_settings;
    new_settings.c_lflag &= ~ICANON;
    new_settings.c_lflag &= ~ECHO;
    new_settings.c_lflag &= ~ISIG;
    new_settings.c_cc[VMIN] = 1;
    new_settings.c_cc[VTIME] = 0;
    tcsetattr(0, TCSANOW, &new_settings);
}

void close_keyboard()
{
    tcsetattr(0, TCSANOW, &initial_settings);
}

int kbhit()
{
    char ch;
    int nread;

    if(peek_character != -1)
        return 1;
    new_settings.c_cc[VMIN]=0;
    tcsetattr(0, TCSANOW, &new_settings);
    nread = read(0,&ch,1);
    new_settings.c_cc[VMIN]=1;
    tcsetattr(0, TCSANOW, &new_settings);

    if(nread == 1) {
        peek_character = ch;
        return 1;
    }
    return 0;
}
//#include <chrono>
int readch()
{
    char ch;

    if(peek_character != -1) {
        ch = peek_character;
        peek_character = -1;
        return ch;
    }
    read(0,&ch,1);
    return ch;
}




//int main (void){
int main(int argc, char **argv){
  ros::init(argc, argv, "fsrs_ros");
  ros::NodeHandle n;


//int _tmain(int argc, _TCHAR* argv[]) {

  printf("--------------------------------------------------------\n");
  printf("=  EMERGENCY CALL TO ROBOT (JULY 2014)  =\n"); 
  printf("--------------------------------------------------------\n");
  printf("\n");
  printf("Press button to call robot\n");
  printf("Press q and touch button to end program\n");  
 /*
  userOptionsInterface();

  std::cin.get();
  
  */
   time_t t = time(0); 
   lastDatabaseCheck=t-20;
  
     SerialStream serial_port ;
     char c;
     char next_byte;
     
     
     serial_port.Open( "/dev/ttyACM0" ) ; ///dev/
     if ( ! serial_port.good() ){
         std::cerr << "[" << __FILE__ << ":" << __LINE__ << "] "
                   << "Error: Could not open serial port."
                   << std::endl ;
         exit(1) ;
     }
     //
     // Set the baud rate of the serial port.
     //
     serial_port.SetBaudRate( SerialStreamBuf::BAUD_9600 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the baud rate." <<  std::endl ;
         exit(1) ;
     }
     //
     // Set the number of data bits.
     //
     serial_port.SetCharSize( SerialStreamBuf::CHAR_SIZE_8 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the character size." <<  std::endl ;
         exit(1) ;
     }
     //
     // Disable parity.
     //
     serial_port.SetParity( SerialStreamBuf::PARITY_NONE ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not disable the parity." <<  std::endl ;
         exit(1) ;
     }
     //
     // Set the number of stop bits.
     //
     serial_port.SetNumOfStopBits( 1 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the number of stop bits." << std::endl ;
         exit(1) ;
     }
     //
     // Turn off hardware flow control.
     //
     serial_port.SetFlowControl( SerialStreamBuf::FLOW_CONTROL_NONE ) ;
     if ( ! serial_port.good() ) {
         std::cerr << "Error: Could not use hardware flow control." << std::endl ;
         exit(1) ;
     }


        sleep(1);
   
    //std::cout << "here\n";
	
 //serial_port.SetVTime(25);
 //serial_port.SetVMin(2);
    
    char str[256];
    //serial_port << out;
    for(int i=0; i<256; ++i ){
      str[i]= 0;
    }
    
    int ch = 0;
    init_keyboard();
    while(ch != 'q') {
        //std::cout << ".";  
	//sleep(1);
        usleep(100000); //100milliseconds
        ros::spinOnce();

	//for(int i=0; i<256; ++i ){
	//    str[i]= 0;
	//}
        serial_port >> str;
        currentTime = time(NULL);
        if(kbhit()) {
            ch = readch();
        }
        if(ch=='q'){
	  break;
	}
	if(strlen(str) > 0){
	    std::cout << str << std::endl;
     
	    if (currentTime > (lastTimeTouched + 2)){ //ch != 'q' && 
		std::cout << "EMERGENCY! SUMMON ROBOT\n";
		//write to database, then stored procedure will somehow notify robot
		databaseCheck();
	    }
	    lastTimeTouched = currentTime;
	}
	
 
    }
    close_keyboard();
    
    serial_port.Close();

    /*
     * 
     * 
         //char out_buf[] = "s";
     //serial_port.write(out_buf, 1);  
     
            //printf("looping\n");
    	  // std::cout << ".";    
       // while( serial_port.rdbuf()->in_avail() > 0 ){
        //   serial_port.get(next_byte); 
        //   std::cerr << next_byte;
	//   std::cout << "got something\n";
       // }
       
  /*while( serial_port.rdbuf()->in_avail() > 0 )
     {
         usleep(100) ;
     }
*/
     //usleep(100) ; //wait a little
     
           // sleep(1);
       // sscanf(str,"%d",&res);
       /*
 char ard_msg='x';
 //  char str[256];
      serial_port << "s";
          std::cout << "here 2\n";
     std::flush(serial_port);
         std::cout << "here 3\n";
     // serial_port <<std::flush();
      serial_port >> ard_msg;
          std::cout << "here 4\n";
      std::cout<<ard_msg;
          std::cout << "here 5\n";
     std::flush(std::cout);
         std::cout << "here 6\n";
      serial_port << "q";
         std::flush(serial_port);
      //serial_port <<std::flush();
      serial_port >> ard_msg;
      std::cout<<ard_msg;	
         std::flush(std::cout);
	*/
       
 //serial_port.read(str,10);
 //std::cout<<ard_msg;
  //    serial_port << "q\n";
 //serial_port.read(str,10);
 //std::cout<<str;

    

 
 /*
     
    char str[256];
    //serial_port << out;
    for(int i=0; i<256; ++i ){
      str[i]= 0;
    }
    serial_port >> str;
   // sscanf(str,"%d",&res);
     std::cout << str << std::endl;
   */  
     /*
    int ch = 0;
    init_keyboard();
    while(ch != 'q') {
        //printf("looping\n");
    	   std::cout << ".";    
        while( serial_port.rdbuf()->in_avail() > 0 ){
           serial_port.get(next_byte); 
           std::cerr << next_byte;
	   std::cout << "got something\n";
        }
        usleep(100) ;
       // sleep(1);
        if(kbhit()) {
            ch = readch();
        }
    }
    close_keyboard();
   */ 
     /*
    char out_buf2[] = "q";
    serial_port.write(out_buf2, 1);  
         std::cout << "wrote q\n";
*/

     
     /*
     
     while( 1  )
     {
         char next_byte;
         serial_port.get(next_byte); // HERE I RECEIVE THE FIRST ANSWER
         std::cerr << next_byte;

     }
     std::cerr << std::endl ;
*/
     
  return(0);
}






int mygetch( ) {  
  struct termios oldt, newt;  
  int ch;  
  tcgetattr( STDIN_FILENO, &oldt );  
  newt = oldt;  
  newt.c_lflag &= ~( ICANON | ECHO );  
  tcsetattr( STDIN_FILENO, TCSANOW, &newt );  
  ch = getchar();  
  tcsetattr( STDIN_FILENO, TCSANOW, &oldt );  
  return ch;
} 





int serialStuff(){



/*
  
  
	int usingBase=TRUE;//FALSE
	int usingHead=FALSE; //FALSE ;//TRUE

	//HANDLE hSerial_head;
	HANDLE hSerial_base;

	

//  ros::Subscriber sub = n.subscribe("myTopic", 1000, myCallbackFunction);
	
	
	//SET UP BASE
	if(usingBase){
		hSerial_base = CreateFileA("\\\\.\\COM4", //24 6   20
						GENERIC_READ | GENERIC_WRITE,
						0,
						0,
						OPEN_EXISTING,
						FILE_ATTRIBUTE_NORMAL,
						0);
		if(hSerial_base==INVALID_HANDLE_VALUE){
			if(GetLastError()==ERROR_FILE_NOT_FOUND){
			//serial port does not exist
			}
			//some other error occurred
		}

		//SET SERIAL PARAMS
		//BASE
		DCB dcbSerialParams_base = {0};
		dcbSerialParams_base.DCBlength=sizeof(dcbSerialParams_base);
		if (!GetCommState(hSerial_base, &dcbSerialParams_base)) {
			//error getting state
		}
		dcbSerialParams_base.BaudRate=CBR_9600; //CBR_115200//CBR_9600; //CBR_115200;
		dcbSerialParams_base.ByteSize=8;
		dcbSerialParams_base.StopBits=ONESTOPBIT;
		dcbSerialParams_base.Parity=NOPARITY;
		if(!SetCommState(hSerial_base, &dcbSerialParams_base)){
			//error setting serial port state
		}

		//SET TIMEOUTS
		COMMTIMEOUTS timeouts_base={0};
		timeouts_base.ReadIntervalTimeout=50;
		timeouts_base.ReadTotalTimeoutConstant=50;
		timeouts_base.ReadTotalTimeoutMultiplier=10;

		timeouts_base.WriteTotalTimeoutConstant=50;
		timeouts_base.WriteTotalTimeoutMultiplier=10;
		if(!SetCommTimeouts(hSerial_base, &timeouts_base)){
			//error 
		}
	}

	int n=255;
	char szBuff[256] = {0};
	DWORD dwBytesRead = 0;
	//if(!ReadFile(hSerial, szBuff, n, &dwBytesRead, NULL)){
		//error occurred. Report to user.
	//}
	
	//do something
	
	int done=FALSE;
	int input;     
	char mySendBuf[256];
	char myRecBuf[256];
	DWORD bytes = 0;
	
	sprintf(mySendBuf, "r");
	sprintf(myRecBuf, " ");

	std::cout << "entering loop\n";
	while(!done){

		Sleep(20);//250
		ros::spinOnce();
  
		currentTime = time(NULL);

		bytes = 0;

		//CHECK FOR MESSAGES
		//BASE
		if(usingBase){
			ReadFile(hSerial_base, myRecBuf, 255, &bytes, NULL);//100
			if (bytes > 0){
				myRecBuf[bytes] = (char)0;//bytes
				
				int firstdigit = myRecBuf[0] - '0';

				//TESTED THIS SEEMS TO WORK
				//if (firstdigit > 0 && firstdigit < 10){ //if we got an integer
				//	std::cout << "*"; 
				//}

				std::cout << myRecBuf;

				if (strcmp(myRecBuf, "s\r\n") == 0){ //arduino serial println inserts \r then \n T_T
					std::cout << "Arduino started reading from touch sensor\n"; //n
				}
				else if (strcmp(myRecBuf, "q\r\n") == 0){
					std::cout << "Arduino quit reading from touch sensor\n"; //n
				}
				else if (firstdigit > 0 && firstdigit < 10){ //if we got an integer
	
						if (currentTime > (lastTimeTouched + 2)){
							std::cout << "EMERGENCY! SUMMON ROBOT\n";
						}
						lastTimeTouched = currentTime;

					//}

			
				}
				else{
					std::cout << "Eep, strange reading\n"; //n

				}

			}
		}

		

		if(kbhit()){

			input = (int)getch();
			//std::cout << "Pressed " << (char)input << "\n";

			if(input==(int)'s'){
				std::cout << "Sending s\n";
				bytes = 0;
				sprintf(mySendBuf, "s");
				WriteFile(hSerial_base, mySendBuf, 1, &bytes, NULL);
			}
			else if(input==(int)'q'){ //continuous touch sensor read
				std::cout << "Sending q\n";
				sprintf(mySendBuf, "q");
				bytes = 0;
				WriteFile(hSerial_base, mySendBuf, 1, &bytes, NULL);
			}
			else if(input==27){
				std::cout << "Pressed escape\n";
				done=TRUE;
			}
		}
	}
	if(usingBase){
		CloseHandle(hSerial_base);
	}
	
	*/


	return 0;

}




