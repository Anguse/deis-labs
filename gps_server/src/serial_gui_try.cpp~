
//INCLUDES

#include "ros/ros.h"
#include "std_msgs/String.h"
#include <kobuki_msgs/Sound.h>
#include <geometry_msgs/Twist.h>
#include <turtlebot_msgs/SetFollowState.h>
#include <kobuki_msgs/BumperEvent.h>
#include <kobuki_msgs/Led.h>
#include <sound_play/sound_play.h>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>  

#include <sstream>
#include <iostream>
#include <ctime>
#include <string>
#include <vector>
#include <unistd.h>

#include <database_interface/db_class.h>
#include <boost/shared_ptr.hpp>
#include <database_interface/postgresql_database.h>


#include <SFML/Audio.hpp>
#include <iomanip>
#include <stdio.h>


#include <iostream>
#include "ros/ros.h"
#include <time.h>
#include <SerialStream.h>
#include <unistd.h>
#include <cstdlib>
#include <string>
#include <stdio.h>
#include <termios.h>
#include <term.h>
#include <curses.h>

#include <database_interface/db_class.h>
#include <boost/shared_ptr.hpp>
#include <database_interface/postgresql_database.h>

using namespace LibSerial ;


int serialStuff();
int mygetch();
time_t lastTimeTouched = time(NULL) -2;
time_t currentTime = time(NULL) - 2;





//DEFINES

#define padding 15
#define w 300 
#define button_pannel_w w
#define button_pannel_l 50
#define total_width (w+ (2*padding) + 700)
#define total_length (w+ button_pannel_l + (2*padding) +200)
#define FOLLOWING 1
#define MANUAL 2
#define NAVIGATING_USING_MAP 3
#define VACUUMING 4

#define TALKATIVE 1
#define LACONIC 2

//NAMESPACES

using namespace std;
using namespace cv;

//FUNCTION DECLARATIONS

void drawStuff();
float sign(float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y);
bool pointInTriangle(float pt_x, float pt_y, float v1_x, float v1_y, float v2_x, float v2_y, float v3_x, float v3_y);
void mouseCallBackFunc(int event, int x, int y, int flags, void* userdata);
void sleepok(int t, ros::NodeHandle &nh);
void bumperCallback(const kobuki_msgs::BumperEvent msg);


int playWav(int soundIndex);


//GLOBAL VARS

//interface
char aWin[] = "Arm Controller";

int followButton_x1=padding;  
int followButton_y1=w + (2*padding); 
int followButton_x2=w + padding; 
int followButton_y2=w + padding + button_pannel_l; 

int vacuumButton_x1=padding;  
int vacuumButton_y1=followButton_y2 + padding; 
int vacuumButton_x2=w + padding; 
int vacuumButton_y2=vacuumButton_y1 + button_pannel_l - padding; 

int verbosityButton_x1=padding;  
int verbosityButton_y1=vacuumButton_y2 + padding; 
int verbosityButton_x2=w + padding; 
int verbosityButton_y2=verbosityButton_y1 + button_pannel_l - padding; 



int up_rgb[] = {255, 255, 255};
int bottom_rgb[] = {255, 255, 255};
int right_rgb[] = {255, 255, 255};
int left_rgb[] = {255, 255, 255};
int default_rgb[] = {255, 255, 255};
int off_rgb[] = {127, 127, 127};

Mat image;
Mat mapImage;
Mat mapImage_smaller;

//logic
int DATABASE_CONNECTED = 0;
int ROBOT_VERBOSITY=TALKATIVE;
int ROBOT_CONTROL_STATE =MANUAL;

//ros
kobuki_msgs::Sound msg;
std::vector<std::string> robot_bumper_messages;
std::vector<int> said_bumper_message_recently;
time_t lastTimeBumperEventProcced;
time_t lastMotionEventProcced;
time_t lastDatabaseCheck;

std::vector<std::string> robot_emergency_messages;
std::vector<int> said_emergency_message_recently;
 
std::vector<std::string> robot_wavfile_names;
std::vector<int> used_wavfile_recently;
  
int lastBumperMessage=-1;



int OKAY_TO_MOVE = 0;

geometry_msgs::Twist currentMovementCommand;
std::deque<geometry_msgs::Twist> scheduledMovements;

//CLASSES

class rosStuff{
  public:
  ros::NodeHandle n;
  ros::Publisher motor_pub;
  ros::Publisher sound_pub; 
  ros::Publisher blink_pub;
  ros::Publisher blink_pub2;
  //ros::Publisher wave_pub;   
  
  sound_play::SoundClient sc;
  ros::ServiceClient followServiceClient;
  turtlebot_msgs::SetFollowState followCommand;
  geometry_msgs::Twist movementCommand;
  ros::Subscriber bumper_sub;
  kobuki_msgs::LedPtr led_msg_ptr;
    
  void bumperCallback(const kobuki_msgs::BumperEvent msg); 
  void initBumper(); 
  void vacuum_clean();
  void moveForwardAWeeBit();
  void moveBackwardAWeeBit();
  void turnRandomly(double magnitudeOfTurn);
  void largeTurn();
};



int main(int argc, char **argv){
  
  ros::init(argc, argv, "serial_arm");
  ROS_INFO("SERIAL ROBOT ARM CONTROL");
  

  ros::NodeHandle n;
    char str[256];
    //serial_port << out;
    for(int i=0; i<256; ++i ){
      str[i]= 0;
    }

//int _tmain(int argc, _TCHAR* argv[]) {

  printf("--------------------------------------------------------\n");
  printf("=  SERIAL ROBOT ARM CONTROL (SEPTEMBER 2014)  =\n"); 
  printf("--------------------------------------------------------\n");
  printf("\n");
 
   time_t t = time(0); 
   lastDatabaseCheck=t-20;
  
     SerialStream serial_port ;
     char c;
     char next_byte;
     
     
     serial_port.Open( "/dev/ttyACM0"); ///dev/
     if ( ! serial_port.good() ){
         std::cerr << "[" << __FILE__ << ":" << __LINE__ << "] "
                   << "Error: Could not open serial port."
                   << std::endl ;
         exit(1) ;
     }
     //
     // Set the baud rate of the serial port.
     //
     serial_port.SetBaudRate( SerialStreamBuf::BAUD_9600 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the baud rate." <<  std::endl ;
         exit(1) ;
     }
     //
     // Set the number of data bits.
     //
     serial_port.SetCharSize( SerialStreamBuf::CHAR_SIZE_8 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the character size." <<  std::endl ;
         exit(1) ;
     }
     //
     // Disable parity.
     //
     serial_port.SetParity( SerialStreamBuf::PARITY_NONE ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not disable the parity." <<  std::endl ;
         exit(1) ;
     }
     //
     // Set the number of stop bits.
     //
     serial_port.SetNumOfStopBits( 1 ) ;
     if ( ! serial_port.good() ){
         std::cerr << "Error: Could not set the number of stop bits." << std::endl ;
         exit(1) ;
     }
     //
     // Turn off hardware flow control.
     //
     serial_port.SetFlowControl( SerialStreamBuf::FLOW_CONTROL_NONE ) ;
     if ( ! serial_port.good() ) {
         std::cerr << "Error: Could not use hardware flow control." << std::endl ;
         exit(1) ;
     }


        sleep(1);
	
   serial_port.SetVTime(0);
//SetVMin
  

  
  //init stuff
  robot_bumper_messages.push_back("such pain");  said_bumper_message_recently.push_back(0);
  robot_bumper_messages.push_back("ouch my gears"); said_bumper_message_recently.push_back(0);
  robot_bumper_messages.push_back("do you mind?");  said_bumper_message_recently.push_back(0);
  robot_bumper_messages.push_back("why wasn't I born a Roomba?"); said_bumper_message_recently.push_back(0);  
  robot_bumper_messages.push_back("if only I had a laser"); said_bumper_message_recently.push_back(0);

  robot_emergency_messages.push_back("leaping lizards something has happened");  said_emergency_message_recently.push_back(0);
  robot_emergency_messages.push_back("oh gosh it's an emergency");  said_emergency_message_recently.push_back(0); 
  robot_emergency_messages.push_back("oh gosh oh gosh oh gosh");  said_emergency_message_recently.push_back(0);   
  robot_emergency_messages.push_back("why is it always on my shift?");  said_emergency_message_recently.push_back(0); 
  robot_emergency_messages.push_back("not again, why can't my owners live healthier?");  said_emergency_message_recently.push_back(0); 
  robot_emergency_messages.push_back("an advanced sensing system and they have me doing this kind of job");  said_emergency_message_recently.push_back(0);   
  
  robot_wavfile_names.push_back("/home/user2/audio_files/v_start2.wav");  used_wavfile_recently.push_back(0);  
  robot_wavfile_names.push_back("/home/user2/audio_files/v_end.wav");  used_wavfile_recently.push_back(0);    
  robot_wavfile_names.push_back("/home/user2/audio_files/v1_middle.wav");  used_wavfile_recently.push_back(0);  
  robot_wavfile_names.push_back("/home/user2/audio_files/v2_middle.wav");  used_wavfile_recently.push_back(0);  


 // time_t t = time(0);   // get time now
  lastTimeBumperEventProcced=t-20;
  lastMotionEventProcced=t-20;
  lastDatabaseCheck=t-20;
  srand (time(NULL));
  
  rosStuff stuff;
  stuff.motor_pub = stuff.n.advertise<geometry_msgs::Twist>("/mobile_base/commands/velocity", 10); //1000
  stuff.sound_pub = stuff.n.advertise<kobuki_msgs::Sound>("/mobile_base/commands/sound", 10);  
  stuff.followServiceClient = stuff.n.serviceClient<turtlebot_msgs::SetFollowState>("/turtlebot_follower/change_state");
  
  stuff.blink_pub = stuff.n.advertise<kobuki_msgs::Led>("/mobile_base/commands/led1", 10);
  stuff.blink_pub2 = stuff.n.advertise<kobuki_msgs::Led>("/mobile_base/commands/led2", 10);
  
  //kobuki_msgs::Led mything;
  //mything.value=1;
  //stuff.blink_pub.publish(mything);
  stuff.led_msg_ptr.reset(new kobuki_msgs::Led());
  stuff.led_msg_ptr->value = kobuki_msgs::Led::BLACK; //kobuki_msgs::Led::GREEN; //BLACK kobuki_msgs::Led::GREEN;  
  stuff.blink_pub.publish(stuff.led_msg_ptr);
  stuff.blink_pub2.publish(stuff.led_msg_ptr);  
  
  stuff.initBumper();
  
  stuff.movementCommand.linear.x = 0.0;
  stuff.movementCommand.linear.y = 0.0;  
  stuff.movementCommand.linear.z = 0.0;       
  stuff.movementCommand.angular.x = 0.0;
  stuff.movementCommand.angular.y = 0.0;  
  stuff.movementCommand.angular.z = 0.0;   
       
  ros::Rate loop_rate(10);
  

  namedWindow(aWin, 1);
  setMouseCallback(aWin, mouseCallBackFunc, &stuff); //NULL
  moveWindow(aWin, 0, 200);

  mapImage = imread("/home/user2/Pictures/arm.bmp", CV_LOAD_IMAGE_COLOR);   
  if(!mapImage.data){
     cout <<  "Could not open or find the map image" << std::endl;
     return -1;
  } 
  resize(mapImage, mapImage_smaller,Size(mapImage.cols/2,mapImage.rows/2),0,0,INTER_LINEAR);   

  drawStuff();

  
  //NEEDED??? start
  //msg.value = 6;
  loop_rate.sleep();
  loop_rate.sleep();
  loop_rate.sleep();	      
 // int count = 0;
  //ROS_INFO("%d", msg.value);
  ros::spinOnce();
  loop_rate.sleep();
    //NEEDED??? end
     
  int keyPressed=0;
  while(keyPressed!=27 && ros::ok()){ //ESC
    ros::spinOnce();
    loop_rate.sleep();
    keyPressed= waitKey(10); //needed?

    
        serial_port >> str;
        currentTime = time(NULL);
        //if(kbhit()) {
        //    ch = readch();
       // }
       // if(ch=='q'){
	//  break;
	//}
	if(strlen(str) > 0){
	    std::cout << str << std::endl;
     
	    if (currentTime > (lastTimeTouched + 2)){ //ch != 'q' && 
		std::cout << "meow?\n";
	    }
	    lastTimeTouched = currentTime;
	}
    
  }
    serial_port.Close();
    
  return 0;
}


int ROBOT_IS_MOVING = 0;



void rosStuff::bumperCallback(const kobuki_msgs::BumperEvent msg){ 
  

}

void rosStuff::initBumper(){
 // led_msg_ptr.reset(new kobuki_msgs::Led());
  //blink_pub = n.advertise<kobuki_msgs::Led>("commands/led1", 10);
  bumper_sub = n.subscribe("mobile_base/events/bumper", 1000, &rosStuff::bumperCallback, this);
}
  
//functions to determine if point is within a triangle  
float sign(float p1_x, float p1_y, float p2_x, float p2_y, float p3_x, float p3_y){
  return (p1_x - p3_x) * (p2_y - p3_y) - (p2_x - p3_x) * (p1_y - p3_y);
}
bool pointInTriangle(float pt_x, float pt_y, float v1_x, float v1_y, float v2_x, float v2_y, float v3_x, float v3_y){
  bool b1, b2, b3;

  b1 = sign(pt_x, pt_y, v1_x, v1_y, v2_x, v2_y) < 0.0f;
  b2 = sign(pt_x, pt_y, v2_x, v2_y, v3_x, v3_y) < 0.0f;
  b3 = sign(pt_x, pt_y, v3_x, v3_y, v1_x, v1_y) < 0.0f;

  return ((b1 == b2) && (b2 == b3));
}



void drawStuff(){
  
  //draw arrows
  Point up_points[1][3];
  Point down_points[1][3];
  Point right_points[1][3];
  Point left_points[1][3];
     
  up_points[0][0] = Point( (w/2)+padding, padding);
  up_points[0][1] = Point( (w/3)+padding, (w/3) + padding);
  up_points[0][2] = Point( ((2*w)/3)+padding, (w/3) + padding); 
  
  down_points[0][0] = Point( (w/2)+padding, w+padding);
  down_points[0][1] = Point( (w/3)+padding, ((2*w)/3)+padding);
  down_points[0][2] = Point( ((2*w)/3)+padding, ((2*w)/3)+padding );  
 
  right_points[0][0] = Point( ((2*w)/3)+padding, (w/3) + padding);
  right_points[0][1] = Point( w+padding, (w/2)+padding);
  right_points[0][2] = Point( ((2*w)/3)+padding, ((2*w)/3)+padding); 
  
  left_points[0][0] = Point( (w/3) + padding, (w/3) + padding);
  left_points[0][1] = Point( padding, (w/2)+padding);
  left_points[0][2] = Point( (w/3) + padding, ((2*w)/3)+padding);   
  
  const Point* ppt_up[1] = { up_points[0] };  
  const Point* ppt_down[1] = { down_points[0] };   
  const Point* ppt_right[1] = { right_points[0] };  
  const Point* ppt_left[1] = { left_points[0] };  
  
  int npt[]= { 3 };
  image = Mat::zeros(total_length, total_width, CV_8UC3 );
    
  
  //draw buttons
  //rectangle(image, Point(followButton_x1, followButton_y1), Point(followButton_x2, followButton_y2), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(vacuumButton_x1, vacuumButton_y1), Point(vacuumButton_x2, vacuumButton_y2), Scalar(255, 255, 255), -1, 8);
  rectangle(image, Point(verbosityButton_x1, verbosityButton_y1), Point(verbosityButton_x2, verbosityButton_y2), Scalar(255, 255, 255), -1, 8);
  
  //draw text  
 // putText(image, "Manual", Point(10, 15), 1, 1.0, Scalar(0, 0, 255), 1, 8);
 // putText(image, "Automatic", Point(10, 320), 1, 1.0, Scalar(0, 0, 255), 1, 8);
 // putText(image, "Map", Point(350, 15), 1, 1.0, Scalar(0, 0, 255), 1, 8); 


    putText(image, "M1 UP", Point(110, 400), 1, 1.0, Scalar(0, 0, 0), 1, 8);

  
    putText(image, "M1 Down", Point(100, 450), 1, 1.0, Scalar(0, 0, 0), 1, 8);

  cv::Rect roi = cv::Rect(350, padding*2, mapImage_smaller.cols, mapImage_smaller.rows);
  cv::Mat subView = image(roi); //problem 
  mapImage_smaller.copyTo(subView); 
  imshow(aWin, image);
}



void mouseCallBackFunc(int event, int x, int y, int flags, void* userdata){  //mouse callback
  
  rosStuff* r=(rosStuff*)userdata;
  
  time_t t = time(0);  

  //if(t > (lastTimeBumperEventProcced + 3)){ check that at least 2 seconds has gone by since last call for robot to move...
    
    
  if(event == EVENT_LBUTTONDOWN){
    cout << x << ", " << y << endl;
    
    if(x > vacuumButton_x1 && x < vacuumButton_x2 && y>vacuumButton_y1 && y<vacuumButton_y2){ //check if database "button" was pressed
/*
      if(ROBOT_CONTROL_STATE!=VACUUMING){
        ROBOT_CONTROL_STATE=VACUUMING;
	
        ROS_INFO("Starting to Vacuum");
      }  
      else{
	ROBOT_CONTROL_STATE=MANUAL; //default
	
	      
	//try stopping wave....
	ros::Rate loop_rate(10);
	ros::spinOnce();
	if(r->n.ok()){
	  r->sc.stopAll(); //stopWave("/home/turtlebot/Sounds/v_start.wav");
	  ros::spinOnce();
	  loop_rate.sleep(); 
	}	
	
	//try playing wave....
	//ros::Rate loop_rate(10);
	ros::spinOnce();
	if(r->n.ok()){
	  r->sc.playWave("/home/turtlebot/Sounds/v_end.wav");
	  ros::spinOnce();
	  loop_rate.sleep(); 
	}
		
	
        //send command to stop moving
	//should also clear scheduledMovements 
        //ros::Rate loop_rate(10);
        r->movementCommand=geometry_msgs::Twist(); //init       
        r->motor_pub.publish(r->movementCommand);
        ros::spinOnce();
        loop_rate.sleep();
        //ROBUST??? NEED TO SEND A FEW TIMES???
	scheduledMovements.clear();
	ROS_INFO("Stopped Vacuuming");
	
      }
      */
    } 
    else if(x > verbosityButton_x1 && x < verbosityButton_x2 && y>verbosityButton_y1 && y<verbosityButton_y2){ //check if database "button" was pressed
/*
      if(ROBOT_VERBOSITY!=TALKATIVE){
        ROBOT_VERBOSITY=TALKATIVE; //default
        ROS_INFO("Robot Verbose");
	
	
   	
	
      }  
      else{
	ROBOT_VERBOSITY=LACONIC; 
	ROS_INFO("Robot Laconic");
      }
      
      r->turnRandomly(3.0);
      r->moveForwardAWeeBit(); 
           */
    }  

  }

  //need to redraw
  drawStuff();
    
}

void sleepok(int t, ros::NodeHandle &nh)
{
   if (nh.ok())
     sleep(t);
 }
 



int serialStuff(int argc, char **argv){

	
 //serial_port.SetVTime(25);
 //serial_port.SetVMin(2);
    

    /*
    int ch = 0;
    init_keyboard();
    while(ch != 'q') {
        //std::cout << ".";  
	//sleep(1);
        usleep(100000); //100milliseconds
        ros::spinOnce();

	//for(int i=0; i<256; ++i ){
	//    str[i]= 0;
	//}
        serial_port >> str;
        currentTime = time(NULL);
        if(kbhit()) {
            ch = readch();
        }
        if(ch=='q'){
	  break;
	}
	if(strlen(str) > 0){
	    std::cout << str << std::endl;
     
	    if (currentTime > (lastTimeTouched + 2)){ //ch != 'q' && 
		std::cout << "EMERGENCY! SUMMON ROBOT\n";
		//write to database, then stored procedure will somehow notify robot
		databaseCheck();
	    }
	    lastTimeTouched = currentTime;
	}
	
 
    }
    close_keyboard();
    */
    

}

